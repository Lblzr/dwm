diff --git a/config.def.h b/config.def.h
--- a/config.def.h
+++ b/config.def.h
@@ -2,6 +2,7 @@
 /* appearance */
 static const unsigned int borderpx  = 1;        /* border pixel of windows */
+static const unsigned int gappx     = 5;        /* gaps between windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
@@ -85,6 +86,9 @@ static const Key keys[] = {
        { MODKEY,                       XK_period, focusmon,        {.i = +1 } },
        { MODKEY|ShiftMask,             XK_comma,  tagmon,          {.i = -1 } },
        { MODKEY|ShiftMask,             XK_period, tagmon,          {.i = +1 } },
+       { MODKEY,                       XK_minus,  setgaps,         {.i = -1 } },
+       { MODKEY,                       XK_equal,  setgaps,         {.i = +1 } },
+       { MODKEY|ShiftMask,             XK_equal,  setgaps,         {.i = 0  } },
        TAGKEYS(                        XK_1,                       0)
        TAGKEYS(                        XK_2,                       1)
        TAGKEYS(                        XK_3,                       2)
diff --git a/dwm.c b/dwm.c
--- a/dwm.c
+++ b/dwm.c
@@ -119,6 +119,7 @@ struct Monitor {
        int by;                /* bar geometry */
        int mx, my, mw, mh;    /* screen size */
        int wx, wy, ww, wh;    /* window area */
+       int gappx;             /* gaps between windows */
        unsigned int seltags;
        unsigned int sellt;
        unsigned int tagset[2];
@@ -200,6 +201,7 @@ static void sendmon(Client *c, Monitor *m);
 static void setclientstate(Client *c, long state);
 static void setfocus(Client *c);
 static void setfullscreen(Client *c, int fullscreen);
+static void setgaps(const Arg *arg);
 static void setlayout(const Arg *arg);
 static void setmfact(const Arg *arg);
 static void setup(void);
@@ -312,7 +314,7 @@ applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact)
                 if (*w > bw)
                         *w = bw;
        }
-       return *x != c->x || *y != c->y || *w != c->w || *h != c->h;
+       return *x != c->x || *y != c->y || *w != c->w || *h != c->h || *bw != c->bw;
 }
 
 void
@@ -330,7 +332,9 @@ arrange(Monitor *m)
                arrangelayout(m);
        else {
                /* no layout function means the tile layout */
-               tile(m);
+               /* <>< case; rather than providing an arrange function and upsetting other logic that tests for its presence, simply add borders here */
+               for (c = selmon->clients; c; c = c->next)
+                       resize(c, c->x, c->y, c->w - 2 * borderpx, c->h - 2 * borderpx, borderpx, 0);
        }
 }
 
@@ -573,7 +577,7 @@ configurenotify(XEvent *e)
                                for (m = mons; m; m = m->next) {
                                        for (c = m->clients; c; c = c->next)
                                                if (c->isfullscreen)
-                                                       resizeclient(c, m->mx, m->my, m->mw, m->mh);
+                                                       resizeclient(c, m->mx, m->my, m->mw, m->mh, 0);
                                        XMoveResizeWindow(dpy, m->barwin, m->wx, m->by, m->ww, bh);
                                }
                                focus(NULL);
@@ -641,6 +645,7 @@ createmon(void)
        m->nmaster = nmaster;
        m->showbar = showbar;
        m->topbar = topbar;
+       m->gappx = gappx;
        m->lt[0] = &layouts[0];
        m->lt[1] = &layouts[1 % LENGTH(layouts)];
        strncpy(m->ltsymbol, layouts[0].symbol, sizeof m->ltsymbol);
@@ -1119,7 +1124,7 @@ monocle(Monitor *m)
        if (n > 0) /* override layout symbol */
                snprintf(m->ltsymbol, sizeof m->ltsymbol, "[%d]", n);
        for (c = nexttiled(m->clients); c; c = nexttiled(c->next))
-               resize(c, m->wx, m->wy, m->ww - 2 * c->bw, m->wh - 2 * c->bw, 0);
+               resize(c, m->wx, m->wy, m->ww, m->wh, 0, 0);
 }
 
 void
@@ -1187,7 +1192,7 @@ movemouse(const Arg *arg)
                                && (abs(nx - c->x) > snap || abs(ny - c->y) > snap))
                                        togglefloating(NULL);
                                if (!selmon->lt[selmon->sellt]->arrange || c->isfloating)
-                                       resize(c, nx, ny, c->w, c->h, 1);
+                                       resize(c, nx, ny, c->w, c->h, c->bw, 1);
                                break;
                        }
                } while (ev.type != ButtonRelease);
@@ -1327,7 +1332,7 @@ resizemouse(const Arg *arg)
                                        togglefloating(NULL);
                                }
                                if (!selmon->lt[selmon->sellt]->arrange || c->isfloating)
-                                       resize(c, c->x, c->y, nw, nh, 1);
+                                       resize(c, c->x, c->y, nw, nh, c->bw, 1);
                                break;
                        }
                } while (ev.type != ButtonRelease);
@@ -1485,19 +1490,18 @@ setfullscreen(Client *c, int fullscreen)
                        c->isfullscreen = 1;
                        c->oldstate = c->isfloating;
                        c->oldbw = c->bw;
-                       c->bw = 0;
                        c->isfloating = 1;
-                       resizeclient(c, c->mon->mx, c->mon->my, c->mon->mw, c->mon->mh);
+                       resizeclient(c, c->mon->mx, c->mon->my, c->mon->mw, c->mon->mh, 0);
                        XRaiseWindow(dpy, c->win);
                } else if (!fullscreen && c->isfullscreen){
                        XChangeProperty(dpy, c->win, netatom[NetWMState], XA_ATOM, 32,
                                PropModeReplace, (unsigned char*)0, 0);
